import { Injectable } from '@angular/core';
import { HttpClient, HttpParams, HttpErrorResponse } from '@angular/common/http';
import { Observable } from 'rxjs';
import { catchError } from 'rxjs/operators';
import { Customer, PageResponse } from '../models';
import { environment } from '../../environments/environment';
import { BaseService } from './base.service';

@Injectable({ providedIn: 'root' })
export class CustomerService extends BaseService {
  private apiUrl = environment.apiBaseUrl + '/customers';

  constructor(private http: HttpClient) {
    super();
  }

  getAll(page = 0, size = 10, sort = 'id,asc'): Observable<PageResponse<Customer>> {
    const params = new HttpParams()
      .set('page', page.toString())
      .set('size', size.toString())
      .set('sort', sort);
    return this.http.get<PageResponse<Customer>>(this.apiUrl, { params })
      .pipe(catchError((error: HttpErrorResponse) => this.handleError(error)));
  }

  getById(id: number): Observable<Customer> {
    return this.http.get<Customer>(`${this.apiUrl}/${id}`)
      .pipe(catchError((error: HttpErrorResponse) => this.handleError(error)));
  }

  create(data: Customer): Observable<Customer> {
    return this.http.post<Customer>(this.apiUrl, data)
      .pipe(catchError((error: HttpErrorResponse) => this.handleError(error)));
  }

  update(id: number, data: Customer): Observable<Customer> {
    return this.http.put<Customer>(`${this.apiUrl}/${id}`, data)
      .pipe(catchError((error: HttpErrorResponse) => this.handleError(error)));
  }

  delete(id: number): Observable<void> {
    return this.http.delete<void>(`${this.apiUrl}/${id}`)
      .pipe(catchError((error: HttpErrorResponse) => this.handleError(error)));
  }
}
